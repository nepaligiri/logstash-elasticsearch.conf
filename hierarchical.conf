
input
 { 
  jdbc{
		jdbc_driver_library => "C:\Users\igiri\Desktop\project\logstash-7.2.0\logstash-core\lib\jars"
		jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
		jdbc_connection_string => "jdbc:oracle:thin:@localhost:1521:ipoem"
		jdbc_paging_enabled => true
		jdbc_user => "ipoem_pgjp"
		jdbc_password => "novomind"
		statement =>  "	select id,	parent_id, product_type_id, style_code, article_code, size_code, flag, shop_id, state, 
						unique_identifier,mp_product_id, long_description,ean, date_created,long_description_html, date_changed, rank from product"

	}
  }
filter{

	if[size_code] !=  "null"{
	aggregate{
		task_id => "%{size_code}"

	code => "
				map ['third_level'] ||= []
			
				map ['third_level'] <<{
				'long_description_html' => event.get('long_description_html'),
				'long_description' => event.get('long_description'),
				'rank' => event.get('rank'),
				'date_created' =>event.get('date_created'),
				'date_changed' => event.get('date_changed'),
				'ean' => event.get('ean'),
				'size_code' => event.get('size_code'),
				'unique_identifier' => event.get('unique_identifier'),
			
				'parent_id' => event.get('parent_id')}		
	
	event.cancel()
	"
	 push_previous_map_as_event => true
		timeout =>15
		timeout_tags => ['aggregated']	  
	
	  
	
	}
	}
	
	if[article_code] != "null"{
		aggregate {
		task_id =>"%{article_code}"
			code => "
			map ['second_level'] ||= []
			
				map ['second_level'] <<{
				'article_code' => event.get('article_code'),
				'date_created' =>event.get('date_created'),
				'date_changed' => event.get('date_changed'),
				'shop_id' =>event.get('shop_id'),
				'state' => event.get('state')}
				event.cancel()
	" push_previous_map_as_event => true
		timeout =>15
		timeout_tags => ['aggregated']	  
	
	   
	
	}
	}
	
		if[style_code] != "null"{
		aggregate {
		task_id =>"%{style_code}"
			code => "
			map ['first_level'] ||= []
			map ['first_level'] <<{
			'style_code'=> event.get('style_code'),
			'id'=> event.get('id'),
			'flag'=>event.get('flag'),
			'mp_id' => event.get('mp_id')}
			event.cancel()
		"
		 push_previous_map_as_event => true
		timeout =>15
		timeout_tags => ['aggregated']	  
	  
	
	}
	}
	 
	 }
		
		
		
	
	
output {
	  elasticsearch 
	  {
	   document_id => "%{id}"
		hosts => ["localhost:9200"]
		index => "hierarchical_product"
		document_type => product
		

		
	  }
	  stdout{ 
			codec => rubydebug
			}
	 }
 
 